{"version":3,"sources":["webpack://LocalEchoController/webpack/bootstrap","webpack://LocalEchoController/../printable-characters.js","webpack://LocalEchoController/./node_modules/shell-quote/index.js","webpack://LocalEchoController/./node_modules/jsonify/index.js","webpack://LocalEchoController/./node_modules/jsonify/lib/parse.js","webpack://LocalEchoController/./node_modules/jsonify/lib/stringify.js","webpack://LocalEchoController/./node_modules/array-map/index.js","webpack://LocalEchoController/./node_modules/array-filter/index.js","webpack://LocalEchoController/./node_modules/array-reduce/index.js","webpack://LocalEchoController/./lib/HistoryController.js","webpack://LocalEchoController/./lib/Utils.js","webpack://LocalEchoController/./lib/LocalEchoController.js","webpack://LocalEchoController/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ansiEscapeCode","zeroWidthCharacter","zeroWidthCharactersExceptNewline","RegExp","zeroWidthCharacters","partition","ansiEscapeCodes","strlen","Array","from","replace","length","isBlank","blank","map","x","join","[object Object]","spans","lastIndex","exec","push","result","_ref","_ref2","_slicedToArray","nonPrintable","printable","text","slice","json","undefined","JSON","filter","reduce","quote","xs","op","test","String","CONTROL","BAREWORD","SINGLE_QUOTE","DOUBLE_QUOTE","TOKEN","Math","pow","random","toString","parse","env","opts","mapped","chunker","match","Boolean","commented","j","BS","escape","esc","out","isGlob","len","charAt","parseEnvVar","comment","pattern","varend","varname","Error","substr","indexOf","index","_","pre","stringify","getVar","prev","arg","concat","acc","split","at","ch","escapee","\"","\\","/","b","f","error","message","next","number","string","isFinite","hex","uffff","parseInt","fromCharCode","white","array","word","source","reviver","walk","holder","k","v","","gap","indent","rep","escapable","meta","\b","\t","\n","\f","\r","a","charCodeAt","replacer","space","str","partial","mind","toJSON","apply","res","hasOwn","arr","fn","ret","hasAcc","arguments","HistoryController","size","_classCallCheck","this","entries","cursor","_createClass","entry","trim","pop","idx","max","min","wordBoundaries","input","leftSide","words","rx","closestLeftBoundary","offset","found","reverse","find","offsetToColRow","maxCols","row","col","countLines","hasTailingWhitespace","getLastToken","shell_quote","LocalEchoController_LocalEchoController","LocalEchoController","term","options","LocalEchoController_classCallCheck","_handleTermData","handleTermData","_handleTermResize","handleTermResize","history","historySize","maxAutocompleteEntries","_autocompleteHandlers","_active","_input","_cursor","_activePrompt","_activeCharPrompt","_termSize","cols","rows","_disposables","loadAddon","attach","detach","off","forEach","dispose","on","onData","onResize","_len","args","_key","findIndex","e","splice","prompt","_this","continuationPrompt","Promise","resolve","reject","write","_this2","reason","print","normInput","items","padding","println","itemWidth","width","item","printable_characters","wideCols","floor","wideRows","ceil","rowStr","repeat","newInput","applyPrompts","currentPrompt","allRows","_offsetToColRow","applyPromptOffset","moveRows","clearInput","newPrompt","newCursor","newLines","_offsetToColRow2","moveUpRows","callback","_this3","setCursor","resume","setInput","then","inputWithPrompt","_offsetToColRow3","prevCol","prevRow","_offsetToColRow4","newCol","newRow","dir","num","backspace","data","_this4","normData","handleData","_this5","ofs","ord","getPrevious","getNext","handleCursorMove","handleCursorErase","closestRightBoundary","endsWith","isIncompleteInput","handleReadComplete","handleCursorInsert","inputFragment","hasTailingSpace","candidates","callbacks","tokens","expr","_toConsumableArray","console","txt","startsWith","collectAutocompleteCandidates","sort","lastToken","sameFragment","getSharedFragment","fragment","oldFragment","printAndRestartPrompt","printWide","readChar","yn","rewind","__webpack_exports__"],"mappings":"oCACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,ycChFA,MAAMC,EAAN,mEAEMC,EAAmC,uCACnCC,EAAmC,IAAAC,OAAY,MAAAH,EAAA,yCAHrD,KAIMI,EAAmC,IAAAD,OAAY,MAAAH,EAAA,MAAAC,EAAZ,IAJzC,KAKMI,EAAmC,IAAAF,OAAY,OAAAH,EAAA,QAAAC,EAAA,WAAAA,EAAZ,MALzC,KAOAlC,EAAAD,SAAiBsC,sBAIbE,gBAAiB,IAAAH,OAAAH,EAJJ,KAMbO,OAAQR,GAAKS,MAAAC,KAAYV,EAAAW,QAAAN,EAAZ,KANAO,OAQbC,QAASb,GARI,IAQCA,EAAAW,QAAAN,EAAA,IAAAM,QAAA,UAAAC,OAIdE,MAAOd,GAAKS,MAAAC,KAAYV,EAAAW,QAAAR,EAAZ,KAAAY,IACWC,GAAM,OAACA,GAAF,OAAkBA,EAAlBA,EADhB,KAAAC,KAZC,IAgBbC,UAAAlB,GACI,IAAK,IAAA3B,EAAO8C,KAAab,EAAAc,YAAwBpB,EAAzBY,SAAuCvC,EAAIiC,EAAAe,KAAnErB,KAA2FmB,EAAAG,MAAajD,EAAA,IAAD,GAAaA,EAAzB,KAE3F,OADAiC,EAAAc,UAFU,EAGVD,GAGJD,MAAAlB,EAAAN,GAEI,IAAI6B,EAAJ,GAAiBX,EAAjB,EAEA,UAAAY,KAAwCxD,EAAAD,QAAAuC,UAAxCN,GAAsE,KAAAyB,EAAAC,EAAAF,EAAA,SAA1DG,EAA0DF,EAAA,GAA5CG,EAA4CH,EAAA,GAC5DI,EAAOpB,MAAAC,KAAAkB,GAAAE,MAAA,EAAiCpC,EADoBkB,GAElEW,GAAUI,EAAeE,EAAAZ,KAAzB,IACAL,GAAUiB,EAAVjB,OAGJ,OAAAW,qBCzCR,IAAIQ,OAAuBC,WAATC,KAAqBA,KAAOpE,EAAQ,GAClDkD,EAAMlD,EAAQ,GACdqE,EAASrE,EAAQ,GACjBsE,EAAStE,EAAQ,GAErBE,EAAQqE,MAAQ,SAAUC,GACtB,OAAOtB,EAAIsB,EAAI,SAAUrC,GACrB,OAAIA,GAAkB,iBAANA,EACLA,EAAEsC,GAAG3B,QAAQ,OAAQ,QAEvB,QAAQ4B,KAAKvC,KAAO,IAAIuC,KAAKvC,GAC3B,IAAMA,EAAEW,QAAQ,WAAY,QAAU,IAExC,SAAS4B,KAAKvC,GACZ,IAAMA,EAAEW,QAAQ,cAAe,QAAU,IAGzC6B,OAAOxC,GAAGW,QAAQ,oCAAqC,UAEnEM,KAAK,MAYZ,IATA,IAAIwB,EAAU,OACV,SAAU,SAAU,KAAM,SAAU,aACtCxB,KAAK,KAAO,IAEVyB,EAAW,+CACXC,EAAe,qBACfC,EAAe,qBAEfC,EAAQ,GACH5E,EAAI,EAAGA,EAAI,EAAGA,IACnB4E,IAAUC,KAAKC,IAAI,GAAG,GAAGD,KAAKE,UAAUC,SAAS,IAGrDlF,EAAQmF,MAAQ,SAAUlD,EAAGmD,EAAKC,GAC9B,IAAIC,EAeR,SAAgBrD,EAAGmD,EAAKC,GACpB,IAAIE,EAAU,IAAIlD,QACd,IAAMqC,EAAU,IAChB,IAAMC,EAAW,IAAMC,EAAe,IAAMC,EAAe,MAC7D3B,KAAK,KAAM,KACTsC,EAAQrB,EAAOlC,EAAEuD,MAAMD,GAAUE,SACjCC,GAAY,EAEhB,IAAKF,EAAO,SACPJ,IAAKA,MACLC,IAAMA,MACX,OAAOrC,EAAIwC,EAAO,SAAUvD,EAAG0D,GAC3B,IAAID,EAAJ,CAGA,GAAIrD,OAAO,IAAMqC,EAAU,KAAKF,KAAKvC,GACjC,OAASsC,GAAItC,GAuBjB,IATA,IAGI2D,EAAKP,EAAKQ,QAAU,KACpBxB,GAAQ,EACRyB,GAAM,EACNC,EAAM,GACNC,GAAS,EAEJ9F,EAAI,EAAG+F,EAAMhE,EAAEY,OAAQ3C,EAAI+F,EAAK/F,IAAK,CAC1C,IAAIK,EAAI0B,EAAEiE,OAAOhG,GAEjB,GADA8F,EAASA,IAAY3B,IAAgB,MAAN9D,GAAmB,MAANA,GACxCuF,EACAC,GAAOxF,EACPuF,GAAM,OAEL,GAAIzB,EACD9D,IAAM8D,EACNA,GAAQ,EAlBX,KAoBQA,EACL0B,GAAOxF,EAGHA,IAAMqF,GACN1F,GAAK,EACLK,EAAI0B,EAAEiE,OAAOhG,GAET6F,GA3BX,MA0BWxF,GAAYA,IAAMqF,GAzB7B,MAyBmCrF,EACjBA,EAEAqF,EAAKrF,GAIhBwF,GAhCP,MA+BYxF,EACE4F,IAGA5F,OAId,GAxCA,MAwCIA,GAzCJ,MAyCgBA,EACjB8D,EAAQ9D,MAEP,IAAI8B,OAAO,IAAMqC,EAAU,KAAKF,KAAKjE,GACtC,OAASgE,GAAItC,GAEZ,GAAII,OAAO,OAAOmC,KAAKjE,GAExB,OADAmF,GAAY,EACRK,EAAIlD,QACIkD,GAAOK,QAASnE,EAAE8B,MAAM7D,EAAE,GAAKsF,EAAMzB,MAAM4B,EAAE,GAAGzC,KAAK,SAEvDkD,QAASnE,EAAE8B,MAAM7D,EAAE,GAAKsF,EAAMzB,MAAM4B,EAAE,GAAGzC,KAAK,OAEnD3C,IAAMqF,EACXE,GAAM,EAGNC,GAxDC,MAuDIxF,EACE4F,IAEC5F,GAGhB,OAAIyF,GAAgBzB,GAAI,OAAQ8B,QAASN,GAElCA,EAEP,SAASI,IAEL,IAAIG,EAAQC,EAEZ,GAHArG,GAAK,EAGe,MAAhB+B,EAAEiE,OAAOhG,GAAY,CAErB,GADAA,GAAK,EACe,MAAhB+B,EAAEiE,OAAOhG,GACT,MAAM,IAAIsG,MAAM,qBAAuBvE,EAAEwE,OAAOvG,EAAI,EAAG,IAG3D,IADAoG,EAASrE,EAAEyE,QAAQ,IAAKxG,IACX,EACT,MAAM,IAAIsG,MAAM,qBAAuBvE,EAAEwE,OAAOvG,IAEpDqG,EAAUtE,EAAEwE,OAAOvG,EAAGoG,EAASpG,GAC/BA,EAAIoG,MAEC,cAAc9B,KAAKvC,EAAEiE,OAAOhG,KACjCqG,EAAUtE,EAAEiE,OAAOhG,GACnBA,GAAK,IAGLoG,EAASrE,EAAEwE,OAAOvG,GAAGsF,MAAM,cAKvBe,EAAUtE,EAAEwE,OAAOvG,EAAGoG,EAAOK,OAC7BzG,GAAKoG,EAAOK,MAAQ,IAJpBJ,EAAUtE,EAAEwE,OAAOvG,GACnBA,EAAI+B,EAAEY,QAMd,OAWR,SAAiB+D,EAAGC,EAAKpF,GACrB,IAAIT,EAAmB,mBAARoE,EAAqBA,EAAI3D,GAAO2D,EAAI3D,QACzCwC,IAANjD,IAAiBA,EAAI,IAEzB,MAAiB,iBAANA,EACA6F,EAAM/B,EAAQd,EAAK8C,UAAU9F,GAAK8D,EAEjC+B,EAAM7F,EAlBP+F,CAAO,EAAM,GAAIR,MAI/BnC,OAAO,SAAS4C,EAAMC,GACnB,YAAYhD,IAARgD,EACOD,EAEJA,EAAKE,OAAOD,QAtJV9B,CAAMlD,EAAGmD,EAAKC,GAC3B,MAAmB,mBAARD,EAA2BE,EAC/BlB,EAAOkB,EAAQ,SAAU6B,EAAKlF,GACjC,GAAiB,iBAANA,EAAgB,OAAOkF,EAAID,OAAOjF,GAC7C,IAAIqC,EAAKrC,EAAEmF,MAAM/E,OAAO,IAAMyC,EAAQ,MAAQA,EAAQ,IAAK,MAC3D,OAAkB,IAAdR,EAAGzB,OAAqBsE,EAAID,OAAO5C,EAAG,IACnC6C,EAAID,OAAOlE,EAAImB,EAAOG,EAAImB,SAAU,SAAUxC,GACjD,OAAIZ,OAAO,IAAMyC,GAAON,KAAKvB,GAClBe,EAAKmB,MAAMlC,EAAEmE,MAAMtC,GAAO,IAEzB7B,4BC9CxBjD,EAAQmF,MAAQrF,EAAQ,GACxBE,EAAQ8G,UAAYhH,EAAQ,kBCD5B,IAAIuH,EACAC,EAWAxD,EA4IA3C,EAtJAoG,GACIC,IAAM,IACNC,KAAM,KACNC,IAAM,IACNC,EAAM,KACNC,EAAM,KACNjG,EAAM,KACNX,EAAM,KACNI,EAAM,MAIVyG,EAAQ,SAAUvH,GAEd,MACIG,KAAS,cACTqH,QAASxH,EACT+G,GAASA,EACTvD,KAASA,IAIjBiE,EAAO,SAAUxH,GAWb,OATIA,GAAKA,IAAM+G,GACXO,EAAM,aAAetH,EAAI,iBAAmB+G,EAAK,KAMrDA,EAAKxD,EAAKoC,OAAOmB,GACjBA,GAAM,EACCC,GAGXU,EAAS,WAEL,IAAIA,EACAC,EAAS,GAMb,IAJW,MAAPX,IACAW,EAAS,IACTF,EAAK,MAEFT,GAAM,KAAOA,GAAM,KACtBW,GAAUX,EACVS,IAEJ,GAAW,MAAPT,EAEA,IADAW,GAAU,IACHF,KAAUT,GAAM,KAAOA,GAAM,KAChCW,GAAUX,EAGlB,GAAW,MAAPA,GAAqB,MAAPA,EAOd,IANAW,GAAUX,EACVS,IACW,MAAPT,GAAqB,MAAPA,IACdW,GAAUX,EACVS,KAEGT,GAAM,KAAOA,GAAM,KACtBW,GAAUX,EACVS,IAIR,GADAC,GAAUC,EACLC,SAASF,GAGV,OAAOA,EAFPH,EAAM,eAMdI,EAAS,WAEL,IAAIE,EACAjI,EAEAkI,EADAH,EAAS,GAIb,GAAW,MAAPX,EACA,KAAOS,KAAQ,CACX,GAAW,MAAPT,EAEA,OADAS,IACOE,EACJ,GAAW,OAAPX,EAEP,GADAS,IACW,MAAPT,EAAY,CAEZ,IADAc,EAAQ,EACHlI,EAAI,EAAGA,EAAI,IACZiI,EAAME,SAASN,IAAQ,IAClBG,SAASC,IAFCjI,GAAK,EAKpBkI,EAAgB,GAARA,EAAaD,EAEzBF,GAAUxD,OAAO6D,aAAaF,OAC3B,IAA2B,iBAAhBb,EAAQD,GAGtB,MAFAW,GAAUV,EAAQD,QAKtBW,GAAUX,EAItBO,EAAM,eAGVU,EAAQ,WAIJ,KAAOjB,GAAMA,GAAM,KACfS,KA+FZ5G,EAAQ,WAMJ,OADAoH,IACQjB,GACR,IAAK,IACD,OA1CK,WAIL,IAAI7F,EACAG,KAEJ,GAAW,MAAP0F,EAAY,CAGZ,GAFAS,EAAK,KACLQ,IACW,MAAPjB,EAEA,OADAS,EAAK,KACEnG,EAEX,KAAO0F,GAAI,CASP,GARA7F,EAAMwG,IACNM,IACAR,EAAK,KACDnH,OAAOmB,eAAe1B,KAAKuB,EAAQH,IACnCoG,EAAM,kBAAoBpG,EAAM,KAEpCG,EAAOH,GAAON,IACdoH,IACW,MAAPjB,EAEA,OADAS,EAAK,KACEnG,EAEXmG,EAAK,KACLQ,KAGRV,EAAM,cAWCjG,GACX,IAAK,IACD,OAvEI,WAIJ,IAAI4G,KAEJ,GAAW,MAAPlB,EAAY,CAGZ,GAFAS,EAAK,KACLQ,IACW,MAAPjB,EAEA,OADAS,EAAK,KACES,EAEX,KAAOlB,GAAI,CAGP,GAFAkB,EAAMjF,KAAKpC,KACXoH,IACW,MAAPjB,EAEA,OADAS,EAAK,KACES,EAEXT,EAAK,KACLQ,KAGRV,EAAM,aA+CCW,GACX,IAAK,IACD,OAAOP,IACX,IAAK,IACD,OAAOD,IACX,QACI,OAAOV,GAAM,KAAOA,GAAM,IAAMU,IA3G7B,WAIH,OAAQV,GACR,IAAK,IAKD,OAJAS,EAAK,KACLA,EAAK,KACLA,EAAK,KACLA,EAAK,MACE,EACX,IAAK,IAMD,OALAA,EAAK,KACLA,EAAK,KACLA,EAAK,KACLA,EAAK,KACLA,EAAK,MACE,EACX,IAAK,IAKD,OAJAA,EAAK,KACLA,EAAK,KACLA,EAAK,KACLA,EAAK,KACE,KAEXF,EAAM,eAAiBP,EAAK,KAkFemB,KAOnDxI,EAAOD,QAAU,SAAU0I,EAAQC,GAC/B,IAAInF,EAiBJ,OAfAM,EAAO4E,EACPrB,EAAK,EACLC,EAAK,IACL9D,EAASrC,IACToH,IACIjB,GACAO,EAAM,gBASgB,mBAAZc,EAA0B,SAASC,EAAKC,EAAQpH,GAC1D,IAAIqH,EAAGC,EAAG5H,EAAQ0H,EAAOpH,GACzB,GAAIN,GAA0B,iBAAVA,EAChB,IAAK2H,KAAK3H,EACFP,OAAOkB,UAAUC,eAAe1B,KAAKc,EAAO2H,UAElC7E,KADV8E,EAAIH,EAAKzH,EAAO2H,IAEZ3H,EAAM2H,GAAKC,SAEJ5H,EAAM2H,IAK7B,OAAOH,EAAQtI,KAAKwI,EAAQpH,EAAKN,GAdG,EAerC6H,GAAIxF,GAAS,IAAOA,kBC/Q3B,IAEIyF,EACAC,EAUAC,EAZAC,EAAY,2HAGZC,GACIC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNC,KAAM,MACNlC,IAAM,MACNC,KAAM,QAId,SAASpD,EAAM4D,GAOX,OADAmB,EAAU/F,UAAY,EACf+F,EAAU5E,KAAKyD,GAAU,IAAMA,EAAOrF,QAAQwG,EAAW,SAAUO,GACtE,IAAIpJ,EAAI8I,EAAKM,GACb,MAAoB,iBAANpJ,EAAiBA,EAC3B,OAAS,OAASoJ,EAAEC,WAAW,GAAG1E,SAAS,KAAKnB,OAAO,KAC1D,IAAM,IAAMkE,EAAS,IAmG9BhI,EAAOD,QAAU,SAAUmB,EAAO0I,EAAUC,GACxC,IAAI5J,EAMJ,GALA+I,EAAM,GACNC,EAAS,GAIY,iBAAVY,EACP,IAAK5J,EAAI,EAAGA,EAAI4J,EAAO5J,GAAK,EACxBgJ,GAAU,QAIQ,iBAAVY,IACZZ,EAASY,GAMb,GADAX,EAAMU,EACFA,GAAgC,mBAAbA,IACC,iBAAbA,GAAoD,iBAApBA,EAAShH,QAChD,MAAM,IAAI2D,MAAM,kBAKpB,OA3HJ,SAASuD,EAAItI,EAAKoH,GAEd,IAAI3I,EACA4I,EACAC,EACAlG,EAEAmH,EADAC,EAAOhB,EAEP9H,EAAQ0H,EAAOpH,GAenB,OAZIN,GAA0B,iBAAVA,GACY,mBAAjBA,EAAM+I,SACjB/I,EAAQA,EAAM+I,OAAOzI,IAKN,mBAAR0H,IACPhI,EAAQgI,EAAI9I,KAAKwI,EAAQpH,EAAKN,WAInBA,GACX,IAAK,SACD,OAAOkD,EAAMlD,GAEjB,IAAK,SAED,OAAO+G,SAAS/G,GAASsD,OAAOtD,GAAS,OAE7C,IAAK,UACL,IAAK,OAID,OAAOsD,OAAOtD,GAElB,IAAK,SACD,IAAKA,EAAO,MAAO,OAKnB,GAJA8H,GAAOC,EACPc,KAG+C,mBAA3CpJ,OAAOkB,UAAUoD,SAASiF,MAAMhJ,GAA6B,CAE7D,IADA0B,EAAS1B,EAAM0B,OACV3C,EAAI,EAAGA,EAAI2C,EAAQ3C,GAAK,EACzB8J,EAAQ9J,GAAK6J,EAAI7J,EAAGiB,IAAU,OASlC,OAJA4H,EAAuB,IAAnBiB,EAAQnH,OAAe,KAAOoG,EAC9B,MAAQA,EAAMe,EAAQ9G,KAAK,MAAQ+F,GAAO,KAAOgB,EAAO,IACxD,IAAMD,EAAQ9G,KAAK,KAAO,IAC9B+F,EAAMgB,EACClB,EAKX,GAAII,GAAsB,iBAARA,EAEd,IADAtG,EAASsG,EAAItG,OACR3C,EAAI,EAAGA,EAAI2C,EAAQ3C,GAAK,EAER,iBADjB4I,EAAIK,EAAIjJ,MAEJ6I,EAAIgB,EAAIjB,EAAG3H,KAEP6I,EAAQzG,KAAKc,EAAMyE,IAAMG,EAAM,KAAO,KAAOF,QAOzD,IAAKD,KAAK3H,EACFP,OAAOkB,UAAUC,eAAe1B,KAAKc,EAAO2H,KAC5CC,EAAIgB,EAAIjB,EAAG3H,KAEP6I,EAAQzG,KAAKc,EAAMyE,IAAMG,EAAM,KAAO,KAAOF,GAajE,OAJAA,EAAuB,IAAnBiB,EAAQnH,OAAe,KAAOoG,EAC9B,MAAQA,EAAMe,EAAQ9G,KAAK,MAAQ+F,GAAO,KAAOgB,EAAO,IACxD,IAAMD,EAAQ9G,KAAK,KAAO,IAC9B+F,EAAMgB,EACClB,GA+BJgB,CAAI,IAAKf,GAAI7H,oBCxJxBlB,EAAOD,QAAU,SAAUsE,EAAIsD,GAC3B,GAAItD,EAAGtB,IAAK,OAAOsB,EAAGtB,IAAI4E,GAE1B,IADA,IAAIwC,KACKlK,EAAI,EAAGA,EAAIoE,EAAGzB,OAAQ3C,IAAK,CAChC,IAAI+C,EAAIqB,EAAGpE,GACPmK,EAAOhK,KAAKiE,EAAIpE,IAAIkK,EAAI7G,KAAKqE,EAAE3E,EAAG/C,EAAGoE,IAE7C,OAAO8F,GAGX,IAAIC,EAASzJ,OAAOkB,UAAUC,8BCF9B9B,EAAOD,QAAU,SAAUsK,EAAKC,GAC9B,GAAID,EAAInG,OAAQ,OAAOmG,EAAInG,OAAOoG,GAElC,IADA,IAAIC,KACKtK,EAAI,EAAGA,EAAIoK,EAAIzH,OAAQ3C,IACzBmK,EAAOhK,KAAKiK,EAAKpK,IAClBqK,EAAGD,EAAIpK,GAAIA,EAAGoK,IAAME,EAAIjH,KAAK+G,EAAIpK,IAEvC,OAAOsK,GAGT,IAAIH,EAASzJ,OAAOkB,UAAUC,8BClB9B,IAAIsI,EAASzJ,OAAOkB,UAAUC,eAE9B9B,EAAOD,QAAU,SAAUsE,EAAIsD,EAAGT,GAC9B,IAAIsD,EAASC,UAAU7H,QAAU,EACjC,GAAI4H,GAAUnG,EAAGF,OAAQ,OAAOE,EAAGF,OAAOwD,EAAGT,GAC7C,GAAI7C,EAAGF,OAAQ,OAAOE,EAAGF,OAAOwD,GAEhC,IAAK,IAAI1H,EAAI,EAAGA,EAAIoE,EAAGzB,OAAQ3C,IACtBmK,EAAOhK,KAAKiE,EAAIpE,KAChBuK,EAKLtD,EAAMS,EAAET,EAAK7C,EAAGpE,GAAIA,IAJhBiH,EAAM7C,EAAGpE,GACTuK,GAAS,IAKjB,OAAOtD,8MCbJ,IAAMwD,EAAb,WACE,SAAAA,EAAYC,gGAAMC,CAAAC,KAAAH,GAChBG,KAAKF,KAAOA,EACZE,KAAKC,WACLD,KAAKE,OAAS,EAJlB,qDAAAC,CAAAN,IAAAlJ,IAAA,OAAAN,MAAA,SAUO+J,GAEkB,KAAjBA,EAAMC,SAGND,GADcJ,KAAKC,QAAQD,KAAKC,QAAQlI,OAAS,KAGrDiI,KAAKC,QAAQxH,KAAK2H,GACdJ,KAAKC,QAAQlI,OAASiI,KAAKF,MAC7BE,KAAKC,QAAQK,IAAI,GAEnBN,KAAKE,OAASF,KAAKC,QAAQlI,YArB/BpB,IAAA,SAAAN,MAAA,WA4BI2J,KAAKE,OAASF,KAAKC,QAAQlI,UA5B/BpB,IAAA,cAAAN,MAAA,WAmCI,IAAMkK,EAAMtG,KAAKuG,IAAI,EAAGR,KAAKE,OAAS,GAEtC,OADAF,KAAKE,OAASK,EACPP,KAAKC,QAAQM,MArCxB5J,IAAA,UAAAN,MAAA,WA4CI,IAAMkK,EAAMtG,KAAKwG,IAAIT,KAAKC,QAAQlI,OAAQiI,KAAKE,OAAS,GAExD,OADAF,KAAKE,OAASK,EACPP,KAAKC,QAAQM,OA9CxBV,EAAA,sWCEO,SAASa,EAAeC,GAK7B,IALqD,IACjDjG,EADgCkG,IAAiBhB,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,KAAAA,UAAA,GAE/CiB,KACAC,EAAK,OAEHpG,EAAQoG,EAAGtI,KAAKmI,IAClBC,EACFC,EAAMpI,KAAKiC,EAAMmB,OAEjBgF,EAAMpI,KAAKiC,EAAMmB,MAAQnB,EAAM,GAAG3C,QAItC,OAAO8I,EAOF,SAASE,EAAoBJ,EAAOK,GACzC,IAAMC,EAAQP,EAAeC,GAAO,GACjCO,UACAC,KAAK,SAAAhJ,GAAC,OAAIA,EAAI6I,IACjB,OAAgB,MAATC,EAAgB,EAAIA,EAatB,SAASG,EAAeT,EAAOK,EAAQK,GAI5C,IAHA,IAAIC,EAAM,EACRC,EAAM,EAECnM,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAEpB,MADCuL,EAAMvF,OAAOhG,IAEvBmM,EAAM,EACND,GAAO,IAEPC,GAAO,GACGF,IACRE,EAAM,EACND,GAAO,GAKb,OAASA,MAAKC,OAMT,SAASC,EAAWb,EAAOU,GAChC,OAAOD,EAAeT,EAAOA,EAAM5I,OAAQsJ,GAASC,IAAM,EA+CrD,SAASG,EAAqBd,GACnC,OAAsC,MAA/BA,EAAMjG,MAAM,gBAMd,SAASgH,EAAaf,GAE3B,MAAqB,KAAjBA,EAAMN,OAAsB,GAC5BoB,EAAqBd,GAAe,GAGzB7K,OAAA6L,EAAA,MAAA7L,CAAM6K,GACPL,OAAS,6KCtGJsB,aACnB,SAAAC,IAAuC,IAA3BC,EAA2BlC,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,GAAAA,UAAA,GAApB,KAAMmC,EAAcnC,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,GAAAA,UAAA,mGAAAoC,CAAAhC,KAAA6B,GACrC7B,KAAK8B,KAAOA,EACZ9B,KAAKiC,gBAAkBjC,KAAKkC,eAAetL,KAAKoJ,MAChDA,KAAKmC,kBAAoBnC,KAAKoC,iBAAiBxL,KAAKoJ,MAEpDA,KAAKqC,QAAU,IAAIxC,EAAkBkC,EAAQO,aAAe,IAC5DtC,KAAKuC,uBAAyBR,EAAQQ,wBAA0B,IAEhEvC,KAAKwC,yBACLxC,KAAKyC,SAAU,EACfzC,KAAK0C,OAAS,GACd1C,KAAK2C,QAAU,EACf3C,KAAK4C,cAAgB,KACrB5C,KAAK6C,kBAAoB,KACzB7C,KAAK8C,WACHC,KAAM,EACNC,KAAM,GAGRhD,KAAKiD,gBAEDnB,IACEA,EAAKoB,UAAWpB,EAAKoB,UAAUlD,MAC9BA,KAAKmD,kGAKLrB,GACP9B,KAAK8B,KAAOA,EACZ9B,KAAKmD,2CAGLnD,KAAKoD,0CAWDpD,KAAK8B,KAAKuB,KACZrD,KAAK8B,KAAKuB,IAAI,OAAQrD,KAAKiC,iBAC3BjC,KAAK8B,KAAKuB,IAAI,SAAUrD,KAAKmC,qBAE7BnC,KAAKiD,aAAaK,QAAQ,SAAA5N,GAAC,OAAIA,EAAE6N,YACjCvD,KAAKiD,kDAQHjD,KAAK8B,KAAK0B,IACZxD,KAAK8B,KAAK0B,GAAG,OAAQxD,KAAKiC,iBAC1BjC,KAAK8B,KAAK0B,GAAG,SAAUxD,KAAKmC,qBAE5BnC,KAAKiD,aAAaxK,KAAKuH,KAAK8B,KAAK2B,OAAOzD,KAAKiC,kBAC7CjC,KAAKiD,aAAaxK,KAAKuH,KAAK8B,KAAK4B,SAAS1D,KAAKmC,qBAEjDnC,KAAK8C,WACHC,KAAM/C,KAAK8B,KAAKiB,KAChBC,KAAMhD,KAAK8B,KAAKkB,qDAOGvD,GAAa,QAAAkE,EAAA/D,UAAA7H,OAAN6L,EAAM,IAAAhM,MAAA+L,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAND,EAAMC,EAAA,GAAAjE,UAAAiE,GAClC7D,KAAKwC,sBAAsB/J,MACzBgH,KACAmE,2DAOsBnE,GACxB,IAAMc,EAAMP,KAAKwC,sBAAsBsB,UAAU,SAAAC,GAAC,OAAIA,EAAEtE,KAAOA,KAClD,IAATc,GAEJP,KAAKwC,sBAAsBwB,OAAOzD,EAAK,gCAOpC0D,GAAmC,IAAAC,EAAAlE,KAA3BmE,EAA2BvE,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,GAAAA,UAAA,GAAN,KAChC,OAAO,IAAIwE,QAAQ,SAACC,EAASC,GAC3BJ,EAAKpC,KAAKyC,MAAMN,GAChBC,EAAKtB,eACHqB,SACAE,qBACAE,UACAC,UAGFJ,EAAKxB,OAAS,GACdwB,EAAKvB,QAAU,EACfuB,EAAKzB,SAAU,qCAWVwB,GAAQ,IAAAO,EAAAxE,KACf,OAAO,IAAIoE,QAAQ,SAACC,EAASC,GAC3BE,EAAK1C,KAAKyC,MAAMN,GAChBO,EAAK3B,mBACHoB,SACAI,UACAC,gDAQwB,IAApBG,EAAoB7E,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,GAAAA,UAAA,GAAX,UACS,MAAtBI,KAAK4C,eAAmD,MAA1B5C,KAAK6C,mBACrC7C,KAAK8B,KAAKyC,MAAM,QAEQ,MAAtBvE,KAAK4C,gBACP5C,KAAK4C,cAAc0B,OAAOG,GAC1BzE,KAAK4C,cAAgB,MAEO,MAA1B5C,KAAK6C,oBACP7C,KAAK6C,kBAAkByB,OAAOG,GAC9BzE,KAAK6C,kBAAoB,MAE3B7C,KAAKyC,SAAU,kCAMTzF,GACNgD,KAAK0E,MAAM1H,EAAU,oCAMjBA,GACJ,IAAM2H,EAAY3H,EAAQlF,QAAQ,WAAY,MAC9CkI,KAAK8B,KAAKyC,MAAMI,EAAU7M,QAAQ,MAAO,2CAMjC8M,GAAoB,IAAbC,EAAajF,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,GAAAA,UAAA,GAAH,EACzB,GAAoB,GAAhBgF,EAAM7M,OAAa,OAAO+M,QAAQ,IAUtC,IAPA,IAAMC,EACJH,EAAMtL,OAAO,SAAC0L,EAAOC,GAAR,OAAiBhL,KAAKuG,IAAIwE,EAAOlP,OAAAoP,EAAA,OAAApP,CAAOmP,KAAQ,GAAKJ,EAC9DM,EAAWlL,KAAKmL,MAAMpF,KAAK8C,UAAUC,KAAOgC,GAC5CM,EAAWpL,KAAKqL,KAAKV,EAAM7M,OAASoN,GAGtC/P,EAAI,EACCkM,EAAM,EAAGA,EAAM+D,IAAY/D,EAAK,CAIvC,IAHA,IAAIiE,EAAS,GAGJhE,EAAM,EAAGA,EAAM4D,IAAY5D,EAClC,GAAInM,EAAIwP,EAAM7M,OAAQ,CACpB,IAAIkN,EAAOL,EAAMxP,KAEjBmQ,GADAN,GAAQ,IAAIO,OAAOT,EAAYjP,OAAAoP,EAAA,OAAApP,CAAOmP,IAI1CjF,KAAK8E,QAAQS,yCAWJ5E,GACX,IAAMsD,GAAUjE,KAAK4C,mBAAqBqB,QAAU,GAC9CE,GACHnE,KAAK4C,mBAAqBuB,oBAAsB,GAEnD,OAAOF,EAAStD,EAAM7I,QAAQ,MAAO,KAAOqM,6CAO5BxD,EAAOK,GACvB,IAAMyE,EAAWzF,KAAK0F,aAAa5P,OAAAoP,EAAA,MAAApP,CAAM6K,EAAOK,IAChD,OAAOlL,OAAAoP,EAAA,OAAApP,CAAO2P,wCAyBd,IAfA,IAAME,EAAgB3F,KAAK0F,aAAa1F,KAAK0C,QAGvCkD,EAAUpE,EAAWmE,EAAe3F,KAAK8C,UAAUC,MAJ9C8C,EAQUzE,EACnBuE,EAFmB3F,KAAK8F,kBAAkB9F,KAAK0C,OAAQ1C,KAAK2C,SAI5D3C,KAAK8C,UAAUC,MAIXgD,GAfKF,EAQHtE,IAOSqE,EAfNC,EAQEvE,IAOoB,GACxBlM,EAAI,EAAGA,EAAI2Q,IAAY3Q,EAAG4K,KAAK8B,KAAKyC,MAAM,OAGnDvE,KAAK8B,KAAKyC,MAAM,SAChB,IAASnP,EAAI,EAAGA,EAAIwQ,IAAWxQ,EAAG4K,KAAK8B,KAAKyC,MAAM,2CAS3CkB,MAA6B7F,UAAA7H,OAAA,QAAAoB,IAAAyG,UAAA,KAAAA,UAAA,KAEpBI,KAAKgG,aAGrB,IAAMC,EAAYjG,KAAK0F,aAAaD,GACpCzF,KAAK0E,MAAMuB,GAGPjG,KAAK2C,QAAU7M,OAAAoP,EAAA,OAAApP,CAAO2P,KACxBzF,KAAK2C,QAAU7M,OAAAoP,EAAA,OAAApP,CAAO2P,IAIxB,IAAMS,EAAYlG,KAAK8F,kBAAkBL,EAAUzF,KAAK2C,SAClDwD,EAAW3E,EAAWyE,EAAWjG,KAAK8C,UAAUC,MAflBqD,EAgBfhF,EACnB6E,EACAC,EACAlG,KAAK8C,UAAUC,MAHTxB,EAhB4B6E,EAgB5B7E,IAKF8E,EAAaF,EArBiBC,EAgBvB9E,IAKuB,EAEpCtB,KAAK8B,KAAKyC,MAAM,MAChB,IAAK,IAAInP,EAAI,EAAGA,EAAIiR,IAAcjR,EAAG4K,KAAK8B,KAAKyC,MAAM,OACrD,IAASnP,EAAI,EAAGA,EAAImM,IAAOnM,EAAG4K,KAAK8B,KAAKyC,MAAM,OAG9CvE,KAAK0C,OAAS+C,gDAOMa,GAAU,IAAAC,EAAAvG,KACxBE,EAASF,KAAK2C,QAGpB3C,KAAKwG,UAAUxG,KAAK0C,QACpB1C,KAAK8B,KAAKyC,MAAM,QAGhB,IAAMkC,EAAS,WACbF,EAAK5D,QAAUzC,EACfqG,EAAKG,SAASH,EAAK7D,SAKfhD,EAAM4G,IACD,MAAP5G,EACF+G,IAEA/G,EAAIiH,KAAKF,qCAUHP,GACJA,EAAY,IAAGA,EAAY,GAC3BA,EAAYpQ,OAAAoP,EAAA,OAAApP,CAAOkK,KAAK0C,UAASwD,EAAYpQ,OAAAoP,EAAA,OAAApP,CAAOkK,KAAK0C,SAG7D,IAAMkE,EAAkB5G,KAAK0F,aAAa1F,KAAK0C,QAL5BmE,GAMArF,EAAWoF,EAAiB5G,KAAK8C,UAAUC,MAIvB3B,EACrCwF,EAFuB5G,KAAK8F,kBAAkB9F,KAAK0C,OAAQ1C,KAAK2C,SAIhE3C,KAAK8C,UAAUC,OAHJ+D,EAVMD,EAUXtF,IAAmBwF,EAVRF,EAUGvF,IAVH0F,EAkBkB5F,EACnCwF,EAFsB5G,KAAK8F,kBAAkB9F,KAAK0C,OAAQwD,GAI1DlG,KAAK8C,UAAUC,MAHJkE,EAlBMD,EAkBXzF,IAAkB2F,EAlBPF,EAkBE1F,IAOrB,GAAI4F,EAASH,EACX,IAAK,IAAI3R,EAAI2R,EAAS3R,EAAI8R,IAAU9R,EAAG4K,KAAK8B,KAAKyC,MAAM,YAEvD,IAAK,IAAInP,EAAI8R,EAAQ9R,EAAI2R,IAAW3R,EAAG4K,KAAK8B,KAAKyC,MAAM,OAIzD,GAAI0C,EAASH,EACX,IAAK,IAAI1R,EAAI0R,EAAS1R,EAAI6R,IAAU7R,EAAG4K,KAAK8B,KAAKyC,MAAM,YAEvD,IAAK,IAAInP,EAAI6R,EAAQ7R,EAAI0R,IAAW1R,EAAG4K,KAAK8B,KAAKyC,MAAM,OAIzDvE,KAAK2C,QAAUuD,2CAMAiB,GACf,GAAIA,EAAM,EAAG,CACX,IAAMC,EAAMnN,KAAKwG,IAAI0G,EAAKrR,OAAAoP,EAAA,OAAApP,CAAOkK,KAAK0C,QAAU1C,KAAK2C,SACrD3C,KAAKwG,UAAUxG,KAAK2C,QAAUyE,QACzB,GAAID,EAAM,EAAG,CAClB,IAAMC,EAAMnN,KAAKuG,IAAI2G,GAAMnH,KAAK2C,SAChC3C,KAAKwG,UAAUxG,KAAK2C,QAAUyE,8CAOhBC,GAAW,IACnB1E,EAAoB3C,KAApB2C,QAASD,EAAW1C,KAAX0C,OACjB,GAAI2E,EAAW,CACb,GAAI1E,GAAW,EAAG,OAClB,IAAM8C,EAAW/C,EAAO/G,OAAO,EAAGgH,EAAU,GAAKD,EAAO/G,OAAOgH,GAC/D3C,KAAKgG,aACLhG,KAAK2C,SAAW,EAChB3C,KAAK0G,SAASjB,GAAU,OACnB,CACL,IAAMA,EAAW/C,EAAO/G,OAAO,EAAGgH,GAAWD,EAAO/G,OAAOgH,EAAU,GACrE3C,KAAK0G,SAASjB,+CAOC6B,GAAM,IACf3E,EAAoB3C,KAApB2C,QAASD,EAAW1C,KAAX0C,OACX+C,EAAW/C,EAAO/G,OAAO,EAAGgH,GAAW2E,EAAO5E,EAAO/G,OAAOgH,GAClE3C,KAAK2C,SAAW2E,EAAKvP,OACrBiI,KAAK0G,SAASjB,gDAOVzF,KAAKqC,SACPrC,KAAKqC,QAAQ5J,KAAKuH,KAAK0C,QAErB1C,KAAK4C,gBACP5C,KAAK4C,cAAcyB,QAAQrE,KAAK0C,QAChC1C,KAAK4C,cAAgB,MAEvB5C,KAAK8B,KAAKyC,MAAM,QAChBvE,KAAKyC,SAAU,2CAUA6E,GAAM,IACbtE,EAAesE,EAAftE,KAAMD,EAASuE,EAATvE,KACd/C,KAAKgG,aACLhG,KAAK8C,WAAcC,OAAMC,QACzBhD,KAAK0G,SAAS1G,KAAK0C,QAAQ,0CAMd4E,GAAM,IAAAC,EAAAvH,KACnB,GAAKA,KAAKyC,QAAV,CAGA,GAA8B,MAA1BzC,KAAK6C,kBAIP,OAHA7C,KAAK6C,kBAAkBwB,QAAQiD,GAC/BtH,KAAK6C,kBAAoB,UACzB7C,KAAK8B,KAAKyC,MAAM,QAKlB,GAAIzO,OAAAoP,EAAA,OAAApP,CAAOwR,GAAQ,GAA6B,KAAvBA,EAAKxI,WAAW,GAAa,CACpD,IAAM0I,EAAWF,EAAKxP,QAAQ,WAAY,MAC1CF,MAAMC,KAAK2P,GAAUlE,QAAQ,SAAA7N,GAAC,OAAI8R,EAAKE,WAAWhS,UAElDuK,KAAKyH,WAAWH,uCAOTA,GAAM,IAAAI,EAAA1H,KACf,GAAKA,KAAKyC,QAAV,CACA,IACIkF,EADEC,EAAMN,EAAKxI,WAAW,GAI5B,GAAW,IAAP8I,EACF,OAAQN,EAAK3L,OAAO,IAClB,IAAK,KACH,GAAIqE,KAAKqC,QAAS,CAChB,IAAIhM,EAAQ2J,KAAKqC,QAAQwF,cACrBxR,IACF2J,KAAK0G,SAASrQ,GACd2J,KAAKwG,UAAU1Q,OAAAoP,EAAA,OAAApP,CAAOO,KAG1B,MAEF,IAAK,KACH,GAAI2J,KAAKqC,QAAS,CAChB,IAAIhM,EAAQ2J,KAAKqC,QAAQyF,UACpBzR,IAAOA,EAAQ,IACpB2J,KAAK0G,SAASrQ,GACd2J,KAAKwG,UAAU1Q,OAAAoP,EAAA,OAAApP,CAAOO,IAExB,MAEF,IAAK,KACH2J,KAAK+H,kBAAkB,GACvB,MAEF,IAAK,KACH/H,KAAK+H,iBAAiB,GACtB,MAEF,IAAK,MACH/H,KAAKgI,mBAAkB,GACvB,MAEF,IAAK,KACHhI,KAAKwG,UAAU1Q,OAAAoP,EAAA,OAAApP,CAAOkK,KAAK0C,SAC3B,MAEF,IAAK,KACH1C,KAAKwG,UAAU,GACf,MAEF,IAAK,IAEQ,OADXmB,EAAM5G,EAAoBf,KAAK0C,OAAQ1C,KAAK2C,WAC3B3C,KAAKwG,UAAUmB,GAChC,MAEF,IAAK,IAEQ,OADXA,EDnfH,SAA8BhH,EAAOK,GAC1C,IAAMC,EAAQP,EAAeC,GAAO,GAAOQ,KAAK,SAAAhJ,GAAC,OAAIA,EAAI6I,IACzD,OAAgB,MAATC,EAAgBN,EAAM5I,OAASkJ,ECifxBgH,CAAqBjI,KAAK0C,OAAQ1C,KAAK2C,WAC5B3C,KAAKwG,UAAUmB,GAChC,MAEF,IAAK,IAEQ,OADXA,EAAM5G,EAAoBf,KAAK0C,OAAQ1C,KAAK2C,YAE1C3C,KAAK0G,SACH1G,KAAK0C,OAAO/G,OAAO,EAAGgM,GAAO3H,KAAK0C,OAAO/G,OAAOqE,KAAK2C,UAEvD3C,KAAKwG,UAAUmB,SAMhB,GAAIC,EAAM,IAAc,MAARA,EACrB,OAAQN,GACN,IAAK,MDpdN,SAA2B3G,GAEhC,MAAoB,IAAhBA,EAAMN,UAKLM,EAAMjG,MAAM,WAAa3C,OAAS,GAAM,IAIxC4I,EAAMjG,MAAM,WAAa3C,OAAS,GAAM,GAQ9B,IAHb4I,EACGrE,MAAM,iBACNgE,MACAD,WAKDM,EAAMuH,SAAS,OAAUvH,EAAMuH,SAAS,UC6bhCC,CAAkBnI,KAAK0C,QAGzB1C,KAAKoI,qBAFLpI,KAAKqI,mBAAmB,MAI1B,MAEF,IAAK,IACHrI,KAAKgI,mBAAkB,GACvB,MAEF,IAAK,KACH,GAAIhI,KAAKwC,sBAAsBzK,OAAS,EAAG,CACzC,IAAMuQ,EAAgBtI,KAAK0C,OAAO/G,OAAO,EAAGqE,KAAK2C,SAC3C4F,EAAkB9G,EAAqB6G,GACvCE,ED9aX,SAAuCC,EAAW9H,GACvD,IAAM+H,EAAS5S,OAAA6L,EAAA,MAAA7L,CAAM6K,GACjB9E,EAAQ6M,EAAO3Q,OAAS,EACxB4Q,EAAOD,EAAO7M,IAAU,GAuB5B,MApBqB,KAAjB8E,EAAMN,QACRxE,EAAQ,EACR8M,EAAO,IACElH,EAAqBd,KAE9B9E,GAAS,EACT8M,EAAO,IAIGF,EAAUnP,OAAO,SAACkP,EAAD7P,GAA8B,IAAf8G,EAAe9G,EAAf8G,GAAImE,EAAWjL,EAAXiL,KAC9C,IACE,OAAO4E,EAAWpM,OAAOqD,EAAEJ,WAAF,GAAGxD,EAAO6M,GAAVtM,OAAAwM,EAAqBhF,MAC9C,MAAOG,GAEP,OADA8E,QAAQ9L,MAAM,uBAAwBgH,GAC/ByE,QAKAnP,OAAO,SAAAyP,GAAG,OAAIA,EAAIC,WAAWJ,KCoZXK,CACjBhJ,KAAKwC,sBACL8F,GAQF,GAJAE,EAAWS,OAIe,IAAtBT,EAAWzQ,OAERwQ,GACHvI,KAAKqI,mBAAmB,UAErB,GAA0B,IAAtBG,EAAWzQ,OAAc,CAElC,IAAMmR,EAAYxH,EAAa4G,GAC/BtI,KAAKqI,mBACHG,EAAW,GAAG7M,OAAOuN,EAAUnR,QAAU,UAEtC,GAAIyQ,EAAWzQ,QAAUiI,KAAKuC,uBAAwB,CAG3D,IAAM4G,EDxab,SAASC,EAAkBC,EAAUb,GAG1C,GAAIa,EAAStR,QAAUyQ,EAAW,GAAGzQ,OAAQ,OAAOsR,EAGpD,IAAMC,EAAcD,EAGpBA,GAAYb,EAAW,GAAGvP,MAAMoQ,EAAStR,OAAQsR,EAAStR,OAAO,GAEjE,IAAK,IAAI3C,EAAE,EAAGA,EAAEoT,EAAWzQ,OAAQ3C,IAAM,CAGvC,IAAKoT,EAAWpT,GAAG2T,WAAWO,GAAc,OAAO,KAEnD,IAAKd,EAAWpT,GAAG2T,WAAWM,GAC5B,OAAOC,EAIX,OAAOF,EAAkBC,EAAUb,GCmZFY,CAAkBd,EAAeE,GAItD,GAAIW,EAAc,CAChB,IAAMD,EAAYxH,EAAa4G,GAC/BtI,KAAKqI,mBACHc,EAAaxN,OAAOuN,EAAUnR,SAMlCiI,KAAKuJ,sBAAsB,WACzB7B,EAAK8B,UAAUhB,UAKjBxI,KAAKuJ,sBAAsB,kBACzB7B,EAAK+B,SAAL,eAAArN,OACiBoM,EAAWzQ,OAD5B,6BAEE4O,KAAK,SAAA+C,GACK,KAANA,GAAmB,KAANA,GACfhC,EAAK8B,UAAUhB,YAMvBxI,KAAKqI,mBAAmB,QAE1B,MAEF,IAAK,IACHrI,KAAKwG,UAAU1Q,OAAAoP,EAAA,OAAApP,CAAOkK,KAAK0C,SAC3B1C,KAAK8B,KAAKyC,MAAM,WAAavE,KAAK4C,mBAAqBqB,QAAU,KACjEjE,KAAK0C,OAAS,GACd1C,KAAK2C,QAAU,EACX3C,KAAKqC,SAASrC,KAAKqC,QAAQsH,cAMnC3J,KAAKqI,mBAAmBf,aCznB9BtS,EAAAU,EAAAkU,EAAA,sCAAA/J,IAGe+J,EAAA","file":"local-echo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","\"use strict\";\n\nconst ansiEscapeCode                   = '[\\u001b\\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]'\n    , zeroWidthCharacterExceptNewline  = '\\u0000-\\u0008\\u000B-\\u0019\\u001b\\u009b\\u00ad\\u200b\\u2028\\u2029\\ufeff\\ufe00-\\ufe0f'\n    , zeroWidthCharacter               = '\\n' + zeroWidthCharacterExceptNewline\n    , zeroWidthCharactersExceptNewline = new RegExp ('(?:' + ansiEscapeCode + ')|[' + zeroWidthCharacterExceptNewline + ']', 'g')\n    , zeroWidthCharacters              = new RegExp ('(?:' + ansiEscapeCode + ')|[' + zeroWidthCharacter + ']', 'g')\n    , partition                        = new RegExp ('((?:' + ansiEscapeCode + ')|[\\t' + zeroWidthCharacter + '])?([^\\t' + zeroWidthCharacter + ']*)', 'g')\n\nmodule.exports = {\n\n    zeroWidthCharacters,\n\n    ansiEscapeCodes: new RegExp (ansiEscapeCode, 'g'),\n\n    strlen: s => Array.from (s.replace (zeroWidthCharacters, '')).length, // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n\n    isBlank: s => s.replace (zeroWidthCharacters, '')\n                   .replace (/\\s/g, '')\n                   .length === 0,\n\n    blank: s => Array.from (s.replace (zeroWidthCharactersExceptNewline, '')) // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n                     .map (x => ((x === '\\t') || (x === '\\n')) ? x : ' ')\n                     .join (''),\n\n    partition (s) {\n        for (var m, spans = []; (partition.lastIndex !== s.length) && (m = partition.exec (s));) { spans.push ([m[1] || '', m[2]]) }\n        partition.lastIndex = 0 // reset\n        return spans\n    },\n\n    first (s, n) {\n\n        let result = '', length = 0\n\n        for (const [nonPrintable, printable] of module.exports.partition (s)) {\n            const text = Array.from (printable).slice (0, n - length) // Array.from solves the emoji problem as described here: http://blog.jonnew.com/posts/poo-dot-length-equals-two\n            result += nonPrintable + text.join ('')\n            length += text.length\n        }\n\n        return result\n    }\n}","var json = typeof JSON !== undefined ? JSON : require('jsonify');\nvar map = require('array-map');\nvar filter = require('array-filter');\nvar reduce = require('array-reduce');\n\nexports.quote = function (xs) {\n    return map(xs, function (s) {\n        if (s && typeof s === 'object') {\n            return s.op.replace(/(.)/g, '\\\\$1');\n        }\n        else if (/[\"\\s]/.test(s) && !/'/.test(s)) {\n            return \"'\" + s.replace(/(['\\\\])/g, '\\\\$1') + \"'\";\n        }\n        else if (/[\"'\\s]/.test(s)) {\n            return '\"' + s.replace(/([\"\\\\$`!])/g, '\\\\$1') + '\"';\n        }\n        else {\n            return String(s).replace(/([#!\"$&'()*,:;<=>?@\\[\\\\\\]^`{|}])/g, '\\\\$1'); \n        }\n    }).join(' ');\n};\n\nvar CONTROL = '(?:' + [\n    '\\\\|\\\\|', '\\\\&\\\\&', ';;', '\\\\|\\\\&', '[&;()|<>]'\n].join('|') + ')';\nvar META = '|&;()<> \\\\t';\nvar BAREWORD = '(\\\\\\\\[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n\nvar TOKEN = '';\nfor (var i = 0; i < 4; i++) {\n    TOKEN += (Math.pow(16,8)*Math.random()).toString(16);\n}\n\nexports.parse = function (s, env, opts) {\n    var mapped = parse(s, env, opts);\n    if (typeof env !== 'function') return mapped;\n    return reduce(mapped, function (acc, s) {\n        if (typeof s === 'object') return acc.concat(s);\n        var xs = s.split(RegExp('(' + TOKEN + '.*?' + TOKEN + ')', 'g'));\n        if (xs.length === 1) return acc.concat(xs[0]);\n        return acc.concat(map(filter(xs, Boolean), function (x) {\n            if (RegExp('^' + TOKEN).test(x)) {\n                return json.parse(x.split(TOKEN)[1]);\n            }\n            else return x;\n        }));\n    }, []);\n};\n\nfunction parse (s, env, opts) {\n    var chunker = new RegExp([\n        '(' + CONTROL + ')', // control chars\n        '(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')*'\n    ].join('|'), 'g');\n    var match = filter(s.match(chunker), Boolean);\n    var commented = false;\n\n    if (!match) return [];\n    if (!env) env = {};\n    if (!opts) opts = {};\n    return map(match, function (s, j) {\n        if (commented) {\n            return;\n        }\n        if (RegExp('^' + CONTROL + '$').test(s)) {\n            return { op: s };\n        }\n\n        // Hand-written scanner/parser for Bash quoting rules:\n        //\n        //  1. inside single quotes, all characters are printed literally.\n        //  2. inside double quotes, all characters are printed literally\n        //     except variables prefixed by '$' and backslashes followed by\n        //     either a double quote or another backslash.\n        //  3. outside of any quotes, backslashes are treated as escape\n        //     characters and not printed (unless they are themselves escaped)\n        //  4. quote context can switch mid-token if there is no whitespace\n        //     between the two quote contexts (e.g. all'one'\"token\" parses as\n        //     \"allonetoken\")\n        var SQ = \"'\";\n        var DQ = '\"';\n        var DS = '$';\n        var BS = opts.escape || '\\\\';\n        var quote = false;\n        var esc = false;\n        var out = '';\n        var isGlob = false;\n\n        for (var i = 0, len = s.length; i < len; i++) {\n            var c = s.charAt(i);\n            isGlob = isGlob || (!quote && (c === '*' || c === '?'));\n            if (esc) {\n                out += c;\n                esc = false;\n            }\n            else if (quote) {\n                if (c === quote) {\n                    quote = false;\n                }\n                else if (quote == SQ) {\n                    out += c;\n                }\n                else { // Double quote\n                    if (c === BS) {\n                        i += 1;\n                        c = s.charAt(i);\n                        if (c === DQ || c === BS || c === DS) {\n                            out += c;\n                        } else {\n                            out += BS + c;\n                        }\n                    }\n                    else if (c === DS) {\n                        out += parseEnvVar();\n                    }\n                    else {\n                        out += c;\n                    }\n                }\n            }\n            else if (c === DQ || c === SQ) {\n                quote = c;\n            }\n            else if (RegExp('^' + CONTROL + '$').test(c)) {\n                return { op: s };\n            }\n            else if (RegExp('^#$').test(c)) {\n                commented = true;\n                if (out.length){\n                    return [out, { comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n                }\n                return [{ comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n            }\n            else if (c === BS) {\n                esc = true;\n            }\n            else if (c === DS) {\n                out += parseEnvVar();\n            }\n            else out += c;\n        }\n\n        if (isGlob) return {op: 'glob', pattern: out};\n\n        return out;\n\n        function parseEnvVar() {\n            i += 1;\n            var varend, varname;\n            //debugger\n            if (s.charAt(i) === '{') {\n                i += 1;\n                if (s.charAt(i) === '}') {\n                    throw new Error(\"Bad substitution: \" + s.substr(i - 2, 3));\n                }\n                varend = s.indexOf('}', i);\n                if (varend < 0) {\n                    throw new Error(\"Bad substitution: \" + s.substr(i));\n                }\n                varname = s.substr(i, varend - i);\n                i = varend;\n            }\n            else if (/[*@#?$!_\\-]/.test(s.charAt(i))) {\n                varname = s.charAt(i);\n                i += 1;\n            }\n            else {\n                varend = s.substr(i).match(/[^\\w\\d_]/);\n                if (!varend) {\n                    varname = s.substr(i);\n                    i = s.length;\n                } else {\n                    varname = s.substr(i, varend.index);\n                    i += varend.index - 1;\n                }\n            }\n            return getVar(null, '', varname);\n        }\n    })\n    // finalize parsed aruments\n    .reduce(function(prev, arg){\n        if (arg === undefined){\n            return prev;\n        }\n        return prev.concat(arg);\n    },[]);\n\n    function getVar (_, pre, key) {\n        var r = typeof env === 'function' ? env(key) : env[key];\n        if (r === undefined) r = '';\n\n        if (typeof r === 'object') {\n            return pre + TOKEN + json.stringify(r) + TOKEN;\n        }\n        else return pre + r;\n    }\n}\n","exports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n","var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n","var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n","module.exports = function (xs, f) {\n    if (xs.map) return xs.map(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = xs[i];\n        if (hasOwn.call(xs, i)) res.push(f(x, i, xs));\n    }\n    return res;\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n","/**\n * Array#filter.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\n\nmodule.exports = function (arr, fn) {\n  if (arr.filter) return arr.filter(fn);\n  var ret = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!hasOwn.call(arr, i)) continue;\n    if (fn(arr[i], i, arr)) ret.push(arr[i]);\n  }\n  return ret;\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n","var hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = function (xs, f, acc) {\n    var hasAcc = arguments.length >= 3;\n    if (hasAcc && xs.reduce) return xs.reduce(f, acc);\n    if (xs.reduce) return xs.reduce(f);\n    \n    for (var i = 0; i < xs.length; i++) {\n        if (!hasOwn.call(xs, i)) continue;\n        if (!hasAcc) {\n            acc = xs[i];\n            hasAcc = true;\n            continue;\n        }\n        acc = f(acc, xs[i], i);\n    }\n    return acc;\n};\n","/**\n * The history controller provides an ring-buffer\n */\nexport class HistoryController {\n  constructor(size) {\n    this.size = size;\n    this.entries = [];\n    this.cursor = 0;\n  }\n\n  /**\n   * Push an entry and maintain ring buffer size\n   */\n  push(entry) {\n    // Skip empty entries\n    if (entry.trim() === \"\") return;\n    // Skip duplicate entries\n    const lastEntry = this.entries[this.entries.length - 1];\n    if (entry == lastEntry) return;\n    // Keep track of entries\n    this.entries.push(entry);\n    if (this.entries.length > this.size) {\n      this.entries.pop(0);\n    }\n    this.cursor = this.entries.length;\n  }\n\n  /**\n   * Rewind history cursor on the last entry\n   */\n  rewind() {\n    this.cursor = this.entries.length;\n  }\n\n  /**\n   * Returns the previous entry\n   */\n  getPrevious() {\n    const idx = Math.max(0, this.cursor - 1);\n    this.cursor = idx;\n    return this.entries[idx];\n  }\n\n  /**\n   * Returns the next entry\n   */\n  getNext() {\n    const idx = Math.min(this.entries.length, this.cursor + 1);\n    this.cursor = idx;\n    return this.entries[idx];\n  }\n}\n","import { parse } from \"shell-quote\";\n\n/**\n * Detects all the word boundaries on the given input\n */\nexport function wordBoundaries(input, leftSide = true) {\n  let match;\n  const words = [];\n  const rx = /\\w+/g;\n\n  while ((match = rx.exec(input))) {\n    if (leftSide) {\n      words.push(match.index);\n    } else {\n      words.push(match.index + match[0].length);\n    }\n  }\n\n  return words;\n}\n\n/**\n * The closest left (or right) word boundary of the given input at the\n * given offset.\n */\nexport function closestLeftBoundary(input, offset) {\n  const found = wordBoundaries(input, true)\n    .reverse()\n    .find(x => x < offset);\n  return found == null ? 0 : found;\n}\nexport function closestRightBoundary(input, offset) {\n  const found = wordBoundaries(input, false).find(x => x > offset);\n  return found == null ? input.length : found;\n}\n\n/**\n * Convert offset at the given input to col/row location\n *\n * This function is not optimized and practically emulates via brute-force\n * the navigation on the terminal, wrapping when they reach the column width.\n */\nexport function offsetToColRow(input, offset, maxCols) {\n  let row = 0,\n    col = 0;\n\n  for (let i = 0; i < offset; ++i) {\n    const chr = input.charAt(i);\n    if (chr == \"\\n\") {\n      col = 0;\n      row += 1;\n    } else {\n      col += 1;\n      if (col > maxCols) {\n        col = 0;\n        row += 1;\n      }\n    }\n  }\n\n  return { row, col };\n}\n\n/**\n * Counts the lines in the given input\n */\nexport function countLines(input, maxCols) {\n  return offsetToColRow(input, input.length, maxCols).row + 1;\n}\n\n/**\n * Checks if there is an incomplete input\n *\n * An incomplete input is considered:\n * - An input that contains unterminated single quotes\n * - An input that contains unterminated double quotes\n * - An input that ends with \"\\\"\n * - An input that has an incomplete boolean shell expression (&& and ||)\n * - An incomplete pipe expression (|)\n */\nexport function isIncompleteInput(input) {\n  // Empty input is not incomplete\n  if (input.trim() == \"\") {\n    return false;\n  }\n\n  // Check for dangling single-quote strings\n  if ((input.match(/'/g) || []).length % 2 !== 0) {\n    return true;\n  }\n  // Check for dangling double-quote strings\n  if ((input.match(/\"/g) || []).length % 2 !== 0) {\n    return true;\n  }\n  // Check for dangling boolean or pipe operations\n  if (\n    input\n      .split(/(\\|\\||\\||&&)/g)\n      .pop()\n      .trim() == \"\"\n  ) {\n    return true;\n  }\n  // Check for tailing slash\n  if (input.endsWith(\"\\\\\") && !input.endsWith(\"\\\\\\\\\")) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the expression ends on a tailing whitespace\n */\nexport function hasTailingWhitespace(input) {\n  return input.match(/[^\\\\][ \\t]$/m) != null;\n}\n\n/**\n * Returns the last expression in the given input\n */\nexport function getLastToken(input) {\n  // Empty expressions\n  if (input.trim() === \"\") return \"\";\n  if (hasTailingWhitespace(input)) return \"\";\n\n  // Last token\n  const tokens = parse(input);\n  return tokens.pop() || \"\";\n}\n\n/**\n * Returns the auto-complete candidates for the given input\n */\nexport function collectAutocompleteCandidates(callbacks, input) {\n  const tokens = parse(input);\n  let index = tokens.length - 1;\n  let expr = tokens[index] || \"\";\n\n  // Empty expressions\n  if (input.trim() === \"\") {\n    index = 0;\n    expr = \"\";\n  } else if (hasTailingWhitespace(input)) {\n    // Expressions with danging space\n    index += 1;\n    expr = \"\";\n  }\n\n  // Collect all auto-complete candidates from the callbacks\n  const all = callbacks.reduce((candidates, { fn, args }) => {\n    try {\n      return candidates.concat(fn(index, tokens, ...args));\n    } catch (e) {\n      console.error(\"Auto-complete error:\", e);\n      return candidates;\n    }\n  }, []);\n\n  // Filter only the ones starting with the expression\n  return all.filter(txt => txt.startsWith(expr));\n}\n\n\nexport function getSharedFragment(fragment, candidates) {\n\n  // end loop when fragment length = first candidate length\n  if (fragment.length >= candidates[0].length) return fragment;\n  \n  // save old fragemnt\n  const oldFragment = fragment;\n  \n  // get new fragment\n  fragment += candidates[0].slice(fragment.length, fragment.length+1);\n\n  for (let i=0; i<candidates.length; i++ ) {\n\n    // return null when there's a wrong candidate\n    if (!candidates[i].startsWith(oldFragment)) return null;\n\n    if (!candidates[i].startsWith(fragment)) {\n      return oldFragment;\n    }\n  }\n\n  return getSharedFragment(fragment, candidates);\n}\n","import { HistoryController } from \"./HistoryController\";\nimport { strlen, first, ansiEscapeCodes } from \"printable-characters\"\n\nimport {\n  closestLeftBoundary,\n  closestRightBoundary,\n  collectAutocompleteCandidates,\n  countLines,\n  getLastToken,\n  hasTailingWhitespace,\n  isIncompleteInput,\n  offsetToColRow,\n  getSharedFragment\n} from \"./Utils\";\n\n/**\n * A local terminal controller is responsible for displaying messages\n * and handling local echo for the terminal.\n *\n * Local echo supports most of bash-like input primitives. Namely:\n * - Arrow navigation on the input\n * - Alt-arrow for word-boundary navigation\n * - Alt-backspace for word-boundary deletion\n * - Multi-line input for incomplete commands\n * - Auto-complete hooks\n */\nexport default class LocalEchoController {\n  constructor(term = null, options = {}) {\n    this.term = term;\n    this._handleTermData = this.handleTermData.bind(this);\n    this._handleTermResize = this.handleTermResize.bind(this)\n    \n    this.history = new HistoryController(options.historySize || 10);\n    this.maxAutocompleteEntries = options.maxAutocompleteEntries || 100;\n\n    this._autocompleteHandlers = [];\n    this._active = false;\n    this._input = \"\";\n    this._cursor = 0;\n    this._activePrompt = null;\n    this._activeCharPrompt = null;\n    this._termSize = {\n      cols: 0,\n      rows: 0,\n    };\n\n    this._disposables = [];\n    \n    if (term) {\n      if (term.loadAddon) term.loadAddon(this);\n      else this.attach();\n    }\n  }\n\n  // xterm.js new plugin API:\n  activate(term) {\n    this.term = term;\n    this.attach();\n  }\n  dispose() {\n    this.detach();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // User-Facing API\n  /////////////////////////////////////////////////////////////////////////////\n  \n  /**\n   *  Detach the controller from the terminal\n   */\n  detach() {\n    if (this.term.off) {\n      this.term.off(\"data\", this._handleTermData);\n      this.term.off(\"resize\", this._handleTermResize);\n    } else {\n      this._disposables.forEach(d => d.dispose());\n      this._disposables = [];\n    }\n  }\n  \n  /**\n   * Attach controller to the terminal, handling events\n   */\n  attach() {\n    if (this.term.on) {\n      this.term.on(\"data\", this._handleTermData);\n      this.term.on(\"resize\", this._handleTermResize);\n    } else {\n      this._disposables.push(this.term.onData(this._handleTermData));\n      this._disposables.push(this.term.onResize(this._handleTermResize));\n    }\n    this._termSize = {\n      cols: this.term.cols,\n      rows: this.term.rows,\n    };\n  }\n\n  /**\n   * Register a handler that will be called to satisfy auto-completion\n   */\n  addAutocompleteHandler(fn, ...args) {\n    this._autocompleteHandlers.push({\n      fn,\n      args\n    });\n  }\n\n  /**\n   * Remove a previously registered auto-complete handler\n   */\n  removeAutocompleteHandler(fn) {\n    const idx = this._autocompleteHandlers.findIndex(e => e.fn === fn);\n    if (idx === -1) return;\n\n    this._autocompleteHandlers.splice(idx, 1);\n  }\n\n  /**\n   * Return a promise that will resolve when the user has completed\n   * typing a single line\n   */\n  read(prompt, continuationPrompt = \"> \") {\n    return new Promise((resolve, reject) => {\n      this.term.write(prompt);\n      this._activePrompt = {\n        prompt,\n        continuationPrompt,\n        resolve,\n        reject\n      };\n\n      this._input = \"\";\n      this._cursor = 0;\n      this._active = true;\n    });\n  }\n\n  /**\n   * Return a promise that will be resolved when the user types a single\n   * character.\n   *\n   * This can be active in addition to `.read()` and will be resolved in\n   * priority before it.\n   */\n  readChar(prompt) {\n    return new Promise((resolve, reject) => {\n      this.term.write(prompt);\n      this._activeCharPrompt = {\n        prompt,\n        resolve,\n        reject\n      };\n    });\n  }\n\n  /**\n   * Abort a pending read operation\n   */\n  abortRead(reason = \"aborted\") {\n    if (this._activePrompt != null || this._activeCharPrompt != null) {\n      this.term.write(\"\\r\\n\");\n    }\n    if (this._activePrompt != null) {\n      this._activePrompt.reject(reason);\n      this._activePrompt = null;\n    }\n    if (this._activeCharPrompt != null) {\n      this._activeCharPrompt.reject(reason);\n      this._activeCharPrompt = null;\n    }\n    this._active = false;\n  }\n\n  /**\n   * Prints a message and changes line\n   */\n  println(message) {\n    this.print(message + \"\\n\");\n  }\n\n  /**\n   * Prints a message and properly handles new-lines\n   */\n  print(message) {\n    const normInput = message.replace(/[\\r\\n]+/g, \"\\n\");\n    this.term.write(normInput.replace(/\\n/g, \"\\r\\n\"));\n  }\n\n  /**\n   * Prints a list of items using a wide-format\n   */\n  printWide(items, padding = 2) {\n    if (items.length == 0) return println(\"\");\n\n    // Compute item sizes and matrix row/cols\n    const itemWidth =\n      items.reduce((width, item) => Math.max(width, strlen(item)), 0) + padding;\n    const wideCols = Math.floor(this._termSize.cols / itemWidth);\n    const wideRows = Math.ceil(items.length / wideCols);\n\n    // Print matrix\n    let i = 0;\n    for (let row = 0; row < wideRows; ++row) {\n      let rowStr = \"\";\n\n      // Prepare columns\n      for (let col = 0; col < wideCols; ++col) {\n        if (i < items.length) {\n          let item = items[i++];\n          item += \" \".repeat(itemWidth - strlen(item));\n          rowStr += item;\n        }\n      }\n      this.println(rowStr);\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Internal API\n  /////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Apply prompts to the given input\n   */\n  applyPrompts(input) {\n    const prompt = (this._activePrompt || {}).prompt || \"\";\n    const continuationPrompt =\n      (this._activePrompt || {}).continuationPrompt || \"\";\n\n    return prompt + input.replace(/\\n/g, \"\\n\" + continuationPrompt);\n  }\n\n  /**\n   * Advances the `offset` as required in order to accompany the prompt\n   * additions to the input.\n   */\n  applyPromptOffset(input, offset) {\n    const newInput = this.applyPrompts(first(input, offset));\n    return strlen(newInput);\n  }\n\n  /**\n   * Clears the current prompt\n   *\n   * This function will erase all the lines that display the current prompt\n   * and move the cursor in the beginning of the first line of the prompt.\n   */\n  clearInput() {\n    const currentPrompt = this.applyPrompts(this._input);\n\n    // Get the overall number of lines to clear\n    const allRows = countLines(currentPrompt, this._termSize.cols);\n\n    // Get the line we are currently in\n    const promptCursor = this.applyPromptOffset(this._input, this._cursor);\n    const { col, row } = offsetToColRow(\n      currentPrompt,\n      promptCursor,\n      this._termSize.cols\n    );\n\n    // First move on the last line\n    const moveRows = allRows - row - 1;\n    for (var i = 0; i < moveRows; ++i) this.term.write(\"\\x1B[E\");\n\n    // Clear current input line(s)\n    this.term.write(\"\\r\\x1B[K\");\n    for (var i = 1; i < allRows; ++i) this.term.write(\"\\x1B[F\\x1B[K\");\n  }\n\n  /**\n   * Replace input with the new input given\n   *\n   * This function clears all the lines that the current input occupies and\n   * then replaces them with the new input.\n   */\n  setInput(newInput, clearInput = true) {\n    // Clear current input\n    if (clearInput) this.clearInput();\n\n    // Write the new input lines, including the current prompt\n    const newPrompt = this.applyPrompts(newInput);\n    this.print(newPrompt);\n\n    // Trim cursor overflow\n    if (this._cursor > strlen(newInput)) {\n      this._cursor = strlen(newInput);\n    }\n\n    // Move the cursor to the appropriate row/col\n    const newCursor = this.applyPromptOffset(newInput, this._cursor);\n    const newLines = countLines(newPrompt, this._termSize.cols);\n    const { col, row } = offsetToColRow(\n      newPrompt,\n      newCursor,\n      this._termSize.cols\n    );\n    const moveUpRows = newLines - row - 1;\n\n    this.term.write(\"\\r\");\n    for (var i = 0; i < moveUpRows; ++i) this.term.write(\"\\x1B[F\");\n    for (var i = 0; i < col; ++i) this.term.write(\"\\x1B[C\");\n\n    // Replace input\n    this._input = newInput;\n  }\n\n  /**\n   * This function completes the current input, calls the given callback\n   * and then re-displays the prompt.\n   */\n  printAndRestartPrompt(callback) {\n    const cursor = this._cursor;\n\n    // Complete input\n    this.setCursor(this._input);\n    this.term.write(\"\\r\\n\");\n\n    // Prepare a function that will resume prompt\n    const resume = () => {\n      this._cursor = cursor;\n      this.setInput(this._input);\n    };\n\n    // Call the given callback to echo something, and if there is a promise\n    // returned, wait for the resolution before resuming prompt.\n    const ret = callback();\n    if (ret == null) {\n      resume();\n    } else {\n      ret.then(resume);\n    }\n  }\n\n  /**\n   * Set the new cursor position, as an offset on the input string\n   *\n   * This function:\n   * - Calculates the previous and current\n   */\n  setCursor(newCursor) {\n    if (newCursor < 0) newCursor = 0;\n    if (newCursor > strlen(this._input)) newCursor = strlen(this._input);\n\n    // Apply prompt formatting to get the visual status of the display\n    const inputWithPrompt = this.applyPrompts(this._input);\n    const inputLines = countLines(inputWithPrompt, this._termSize.cols);\n\n    // Estimate previous cursor position\n    const prevPromptOffset = this.applyPromptOffset(this._input, this._cursor);\n    const { col: prevCol, row: prevRow } = offsetToColRow(\n      inputWithPrompt,\n      prevPromptOffset,\n      this._termSize.cols\n    );\n\n    // Estimate next cursor position\n    const newPromptOffset = this.applyPromptOffset(this._input, newCursor);\n    const { col: newCol, row: newRow } = offsetToColRow(\n      inputWithPrompt,\n      newPromptOffset,\n      this._termSize.cols\n    );\n\n    // Adjust vertically\n    if (newRow > prevRow) {\n      for (let i = prevRow; i < newRow; ++i) this.term.write(\"\\x1B[B\");\n    } else {\n      for (let i = newRow; i < prevRow; ++i) this.term.write(\"\\x1B[A\");\n    }\n\n    // Adjust horizontally\n    if (newCol > prevCol) {\n      for (let i = prevCol; i < newCol; ++i) this.term.write(\"\\x1B[C\");\n    } else {\n      for (let i = newCol; i < prevCol; ++i) this.term.write(\"\\x1B[D\");\n    }\n\n    // Set new offset\n    this._cursor = newCursor;\n  }\n\n  /**\n   * Move cursor at given direction\n   */\n  handleCursorMove(dir) {\n    if (dir > 0) {\n      const num = Math.min(dir, strlen(this._input) - this._cursor);\n      this.setCursor(this._cursor + num);\n    } else if (dir < 0) {\n      const num = Math.max(dir, -this._cursor);\n      this.setCursor(this._cursor + num);\n    }\n  }\n\n  /**\n   * Erase a character at cursor location\n   */\n  handleCursorErase(backspace) {\n    const { _cursor, _input } = this;\n    if (backspace) {\n      if (_cursor <= 0) return;\n      const newInput = _input.substr(0, _cursor - 1) + _input.substr(_cursor);\n      this.clearInput();\n      this._cursor -= 1;\n      this.setInput(newInput, false);\n    } else {\n      const newInput = _input.substr(0, _cursor) + _input.substr(_cursor + 1);\n      this.setInput(newInput);\n    }\n  }\n\n  /**\n   * Insert character at cursor location\n   */\n  handleCursorInsert(data) {\n    const { _cursor, _input } = this;\n    const newInput = _input.substr(0, _cursor) + data + _input.substr(_cursor);\n    this._cursor += data.length;\n    this.setInput(newInput);\n  }\n\n  /**\n   * Handle input completion\n   */\n  handleReadComplete() {\n    if (this.history) {\n      this.history.push(this._input);\n    }\n    if (this._activePrompt) {\n      this._activePrompt.resolve(this._input);\n      this._activePrompt = null;\n    }\n    this.term.write(\"\\r\\n\");\n    this._active = false;\n  }\n\n  /**\n   * Handle terminal resize\n   *\n   * This function clears the prompt using the previous configuration,\n   * updates the cached terminal size information and then re-renders the\n   * input. This leads (most of the times) into a better formatted input.\n   */\n  handleTermResize(data) {\n    const { rows, cols } = data;\n    this.clearInput();\n    this._termSize = { cols, rows };\n    this.setInput(this._input, false);\n  }\n\n  /**\n   * Handle terminal input\n   */\n  handleTermData(data) {\n    if (!this._active) return;\n\n    // If we have an active character prompt, satisfy it in priority\n    if (this._activeCharPrompt != null) {\n      this._activeCharPrompt.resolve(data);\n      this._activeCharPrompt = null;\n      this.term.write(\"\\r\\n\");\n      return;\n    }\n\n    // If this looks like a pasted input, expand it\n    if (strlen(data) > 3 &&  data.charCodeAt(0) !== 0x1b) {\n      const normData = data.replace(/[\\r\\n]+/g, \"\\r\");\n      Array.from(normData).forEach(c => this.handleData(c));\n    } else {\n      this.handleData(data);\n    }\n  }\n\n  /**\n   * Handle a single piece of information from the terminal.\n   */\n  handleData(data) {\n    if (!this._active) return;\n    const ord = data.charCodeAt(0);\n    let ofs;\n\n    // Handle ANSI escape sequences\n    if (ord == 0x1b) {\n      switch (data.substr(1)) {\n        case \"[A\": // Up arrow\n          if (this.history) {\n            let value = this.history.getPrevious();\n            if (value) {\n              this.setInput(value);\n              this.setCursor(strlen(value));\n            }\n          }\n          break;\n\n        case \"[B\": // Down arrow\n          if (this.history) {\n            let value = this.history.getNext();\n            if (!value) value = \"\";\n            this.setInput(value);\n            this.setCursor(strlen(value));\n          }\n          break;\n\n        case \"[D\": // Left Arrow\n          this.handleCursorMove(-1);\n          break;\n\n        case \"[C\": // Right Arrow\n          this.handleCursorMove(1);\n          break;\n\n        case \"[3~\": // Delete\n          this.handleCursorErase(false);\n          break;\n\n        case \"[F\": // End\n          this.setCursor(strlen(this._input));\n          break;\n\n        case \"[H\": // Home\n          this.setCursor(0);\n          break;\n\n        case \"b\": // ALT + LEFT\n          ofs = closestLeftBoundary(this._input, this._cursor);\n          if (ofs != null) this.setCursor(ofs);\n          break;\n\n        case \"f\": // ALT + RIGHT\n          ofs = closestRightBoundary(this._input, this._cursor);\n          if (ofs != null) this.setCursor(ofs);\n          break;\n\n        case \"\\x7F\": // CTRL + BACKSPACE\n          ofs = closestLeftBoundary(this._input, this._cursor);\n          if (ofs != null) {\n            this.setInput(\n              this._input.substr(0, ofs) + this._input.substr(this._cursor)\n            );\n            this.setCursor(ofs);\n          }\n          break;\n      }\n\n      // Handle special characters\n    } else if (ord < 32 || ord === 0x7f) {\n      switch (data) {\n        case \"\\r\": // ENTER\n          if (isIncompleteInput(this._input)) {\n            this.handleCursorInsert(\"\\n\");\n          } else {\n            this.handleReadComplete();\n          }\n          break;\n\n        case \"\\x7F\": // BACKSPACE\n          this.handleCursorErase(true);\n          break;\n\n        case \"\\t\": // TAB\n          if (this._autocompleteHandlers.length > 0) {\n            const inputFragment = this._input.substr(0, this._cursor);\n            const hasTailingSpace = hasTailingWhitespace(inputFragment);\n            const candidates = collectAutocompleteCandidates(\n              this._autocompleteHandlers,\n              inputFragment\n            );\n\n            // Sort candidates\n            candidates.sort();\n\n            // Depending on the number of candidates, we are handing them in\n            // a different way.\n            if (candidates.length === 0) {\n              // No candidates? Just add a space if there is none already\n              if (!hasTailingSpace) {\n                this.handleCursorInsert(\" \");\n              }\n            } else if (candidates.length === 1) {\n              // Just a single candidate? Complete\n              const lastToken = getLastToken(inputFragment);\n              this.handleCursorInsert(\n                candidates[0].substr(lastToken.length) + \" \"\n              );\n            } else if (candidates.length <= this.maxAutocompleteEntries) {\n\n              // search for a shared fragement\n              const sameFragment = getSharedFragment(inputFragment, candidates);\n              \n              // if there's a shared fragement between the candidates\n              // print complete the shared fragment\n              if (sameFragment) {\n                const lastToken = getLastToken(inputFragment);\n                this.handleCursorInsert(\n                  sameFragment.substr(lastToken.length)\n                );\n              }\n\n              // If we are less than maximum auto-complete candidates, print\n              // them to the user and re-start prompt\n              this.printAndRestartPrompt(() => {\n                this.printWide(candidates);\n              });\n            } else {\n              // If we have more than maximum auto-complete candidates, print\n              // them only if the user acknowledges a warning\n              this.printAndRestartPrompt(() =>\n                this.readChar(\n                  `Display all ${candidates.length} possibilities? (y or n)`\n                ).then(yn => {\n                  if (yn == \"y\" || yn == \"Y\") {\n                    this.printWide(candidates);\n                  }\n                })\n              );\n            }\n          } else {\n            this.handleCursorInsert(\"    \");\n          }\n          break;\n\n        case \"\\x03\": // CTRL+C\n          this.setCursor(strlen(this._input));\n          this.term.write(\"^C\\r\\n\" + ((this._activePrompt || {}).prompt || \"\"));\n          this._input = \"\";\n          this._cursor = 0;\n          if (this.history) this.history.rewind();\n          break;\n      }\n\n      // Handle visible characters\n    } else {\n      this.handleCursorInsert(data);\n    }\n  }\n}\n","import LocalEchoController from \"./lib/LocalEchoController\";\nexport { HistoryController } from './lib/HistoryController';\n\nexport default LocalEchoController;\n"],"sourceRoot":""}